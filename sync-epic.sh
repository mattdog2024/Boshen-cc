#!/bin/bash

set -e

EPIC_NAME="$1"
if [ -z "$EPIC_NAME" ]; then
    echo "‚ùå Usage: $0 <epic_name>"
    exit 1
fi

EPIC_DIR=".claude/epics/$EPIC_NAME"
EPIC_FILE="$EPIC_DIR/epic.md"

if [ ! -f "$EPIC_FILE" ]; then
    echo "‚ùå Epic not found: $EPIC_FILE"
    exit 1
fi

echo "üöÄ Syncing epic: $EPIC_NAME"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Get current timestamp
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Step 1: Create Epic Issue
echo "üìù Creating epic issue..."

# Extract epic title and body
EPIC_TITLE=$(grep "^# Epic:" "$EPIC_FILE" | sed 's/^# Epic: //')
if [ -z "$EPIC_TITLE" ]; then
    EPIC_TITLE="$EPIC_NAME"
fi

# Create epic body (strip frontmatter)
EPIC_BODY=$(sed '/^---$/,/^---$/d' "$EPIC_FILE" | sed '/^## Tasks Created$/,$d')

# Create epic issue
EPIC_RESULT=$(gh issue create \
    --title "$EPIC_TITLE" \
    --body "$EPIC_BODY" \
    --label "epic,enhancement" \
    --json number,url)

EPIC_NUMBER=$(echo "$EPIC_RESULT" | jq -r '.number')
EPIC_URL=$(echo "$EPIC_RESULT" | jq -r '.url')

echo "‚úÖ Epic created: #$EPIC_NUMBER"

# Step 2: Create Task Issues
echo "üìã Creating task issues..."

TASK_FILES=$(find "$EPIC_DIR" -name "[0-9]*.md" ! -name "epic.md" | sort)
TASK_COUNT=0
MAPPING_CONTENT=""

# Create epic-specific label
gh label create "epic:$EPIC_NAME" --color "fbca04" --description "Epic: $EPIC_NAME" 2>/dev/null || true

for TASK_FILE in $TASK_FILES; do
    TASK_FILENAME=$(basename "$TASK_FILE")

    # Extract task info
    TASK_NAME=$(grep "^name:" "$TASK_FILE" | sed 's/^name: //')
    TASK_BODY=$(sed '/^---$/,/^---$/d' "$TASK_FILE")

    # Create task issue
    TASK_RESULT=$(gh issue create \
        --title "$TASK_NAME" \
        --body "$TASK_BODY" \
        --label "task,epic:$EPIC_NAME" \
        --json number,url)

    TASK_NUMBER=$(echo "$TASK_RESULT" | jq -r '.number')
    TASK_URL=$(echo "$TASK_RESULT" | jq -r '.url')

    echo "  ‚úÖ Task created: #$TASK_NUMBER - $TASK_NAME"

    # Update task file frontmatter
    sed -i.bak "s|^github:.*|github: $TASK_URL|; s|^updated:.*|updated: $TIMESTAMP|" "$TASK_FILE"
    rm "$TASK_FILE.bak"

    # Add to mapping
    MAPPING_CONTENT="$MAPPING_CONTENT- [$TASK_FILENAME]($TASK_FILE): #$TASK_NUMBER - $TASK_NAME\n"

    TASK_COUNT=$((TASK_COUNT + 1))
done

# Step 3: Update Epic Frontmatter
echo "üìÑ Updating epic frontmatter..."
sed -i.bak "s|^github:.*|github: $EPIC_URL|; s|^updated:.*|updated: $TIMESTAMP|" "$EPIC_FILE"
rm "$EPIC_FILE.bak"

# Step 4: Create GitHub Mapping
echo "üìä Creating GitHub mapping..."
MAPPING_FILE="$EPIC_DIR/github-mapping.md"
cat > "$MAPPING_FILE" << EOF
# GitHub Mapping

**Epic:** #$EPIC_NUMBER - [$EPIC_TITLE]($EPIC_URL)
**Synced:** $TIMESTAMP

## Tasks ($TASK_COUNT)

$MAPPING_CONTENT

---

*Generated by CCPM epic sync*
EOF

echo ""
echo "‚ú® Sync Complete!"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "Epic: #$EPIC_NUMBER - $EPIC_TITLE"
echo "Tasks: $TASK_COUNT issues created"
echo "View: $EPIC_URL"
echo ""
echo "Next steps:"
echo "  - View epic: /pm:epic-show $EPIC_NAME"
echo "  - Start work: /pm:issue-start <task_number>"